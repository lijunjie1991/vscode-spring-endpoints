{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://spring-endpoints/./src/extension.ts","webpack://spring-endpoints/external commonjs \"vscode\"","webpack://spring-endpoints/webpack/bootstrap","webpack://spring-endpoints/webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from \"vscode\";\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  // Use the console to output diagnostic information (console.log) and errors (console.error)\n  // This line of code will only be executed once when your extension is activated\n  console.log(\n    'Congratulations, your extension \"spring-find-endpoints\" is now active!'\n  );\n\n  const disposableSearch = vscode.commands.registerCommand(\n    \"spring-find-endpoints.searchEndpoints\",\n    async () => {\n      const endpoints = await searchForEndpoints();\n      if (endpoints.length > 0) {\n        const selected = await vscode.window.showQuickPick(\n          endpoints.map((ep) => ep.label),\n          { placeHolder: \"Select an endpoint to jump to\" }\n        );\n        if (selected) {\n          const endpoint = endpoints.find((ep) => ep.label === selected);\n          if (endpoint) {\n            const uri = vscode.Uri.file(endpoint.file);\n            const position = new vscode.Position(endpoint.line, 0);\n            const range = new vscode.Range(position, position);\n            const editor = await vscode.window.showTextDocument(uri);\n            editor.selection = new vscode.Selection(range.start, range.start);\n            editor.revealRange(range);\n          }\n        }\n      } else {\n        vscode.window.showInformationMessage(\"No endpoints found.\");\n      }\n    }\n  );\n\n  context.subscriptions.push(disposableSearch);\n\n  // Register the context menu command for copying API URL\n  const disposableCopyUrl = vscode.commands.registerCommand(\n    \"spring-find-endpoints.copyApiUrl\",\n    async () => {\n      const editor = vscode.window.activeTextEditor;\n      if (editor) {\n        const line = editor.selection.active.line; // Get the current line number\n        const file = editor.document.fileName; // Get the current file name\n        const endpoints = await searchForEndpoints(); // Get the endpoints again\n\n        // Find the endpoint that matches the current file and line number\n        const endpoint = endpoints.find(\n          (ep) => ep.line === line && ep.file === file\n        );\n        if (endpoint) {\n          await vscode.env.clipboard.writeText(endpoint.apiPath);\n          vscode.window.showInformationMessage(\n            `Copied API URL: ${endpoint.apiPath}`\n          );\n        } else {\n          vscode.window.showErrorMessage(\n            \"No API URL found for this line in the current file.\"\n          );\n        }\n      }\n    }\n  );\n\n  context.subscriptions.push(disposableCopyUrl);\n}\n\n// Function to search for endpoints in the workspace\nasync function searchForEndpoints(): Promise<\n  { label: string; file: string; line: number; apiPath: string }[]\n> {\n  const endpoints: {\n    label: string;\n    file: string;\n    line: number;\n    apiPath: string;\n  }[] = [];\n  const files = await vscode.workspace.findFiles(\"**/*.java\"); // Adjust the pattern as needed\n\n  for (const file of files) {\n    const content = await vscode.workspace.fs.readFile(file);\n    const text = content.toString();\n    const classRegex = /@RequestMapping\\([\"']([^\"']+)[\"']\\)/g;\n    const methodRegex =\n      /@(GetMapping|PostMapping|PutMapping|DeleteMapping|RequestMapping)\\([\"']([^\"']+)[\"']\\)/g;\n\n    let classMatch;\n    let classPath = \"\";\n\n    // Record the class definition line to prevent duplicate additions\n    const linesWithClassMapping = new Set<number>();\n\n    // Find class-level mapping\n    while ((classMatch = classRegex.exec(text)) !== null) {\n      classPath = classMatch[1];\n      let classLine = text.substring(0, classMatch.index).split(\"\\n\").length;\n      let nextLineIndex = classMatch.index + classMatch[0].length;\n      // Content of next line\n      let nextLine = text\n        .substring(nextLineIndex, text.indexOf(\"\\n\", nextLineIndex + 1))\n        .trimStart();\n      // Filter out blank lines and annotation lines, directly locating the class definition line\n      while (nextLine.startsWith(\"@\") || nextLine.trim() === \"\") {\n        classLine++;\n        nextLineIndex += nextLine.length + 1;\n        nextLine = text\n          .substring(nextLineIndex, text.indexOf(\"\\n\", nextLineIndex + 1))\n          .trimStart();\n      }\n      linesWithClassMapping.add(classLine);\n    }\n\n    let methodMatch;\n    while ((methodMatch = methodRegex.exec(text)) !== null) {\n      let methodLine = text.substring(0, methodMatch.index).split(\"\\n\").length;\n      let nextLineIndex = methodMatch.index + methodMatch[0].length;\n      // content of next line\n      let nextLine = text\n        .substring(nextLineIndex, text.indexOf(\"\\n\", nextLineIndex + 1))\n        .trimStart();\n      // Filter out blank lines and annotation lines, directly locating the method definition line\n      while (nextLine.startsWith(\"@\")) {\n        methodLine++;\n        nextLineIndex += nextLine.length + 1;\n        nextLine = text\n          .substring(nextLineIndex, text.indexOf(\"\\n\", nextLineIndex + 1))\n          .trimStart();\n      }\n\n      // Only add the method mapping if its line is not in the linesWithClassMapping set\n      if (!linesWithClassMapping.has(methodLine)) {\n        let fullPath = \"\";\n        if (classPath.endsWith(\"/\") || methodMatch[2].startsWith(\"/\")) {\n          fullPath = classPath + methodMatch[2];\n        } else {\n          fullPath = `${classPath}/${methodMatch[2]}`;\n        }\n        endpoints.push({\n          label: `${fullPath} (${file.fsPath.split(\"/\").pop()}:${methodLine + 1})`,\n          file: file.fsPath,\n          line: methodLine,\n          apiPath: fullPath,\n        });\n      }\n    }\n  }\n\n  return endpoints.sort((a, b) => a.label.localeCompare(b.label));\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","disposableSearch","vscode","commands","registerCommand","async","endpoints","searchForEndpoints","length","selected","window","showQuickPick","map","ep","label","placeHolder","endpoint","find","uri","Uri","file","position","Position","line","range","Range","editor","showTextDocument","selection","Selection","start","revealRange","showInformationMessage","subscriptions","push","disposableCopyUrl","activeTextEditor","active","document","fileName","env","clipboard","writeText","apiPath","showErrorMessage","files","workspace","findFiles","text","fs","readFile","toString","classRegex","methodRegex","classMatch","classPath","linesWithClassMapping","Set","exec","classLine","substring","index","split","nextLineIndex","nextLine","indexOf","trimStart","startsWith","trim","add","methodMatch","methodLine","has","fullPath","endsWith","fsPath","pop","sort","a","b","localeCompare","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}